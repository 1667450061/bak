#ifndef __GC2755_H__
#define __GC2755_H__
#include "../comip-isp-dev.h"

#if defined(CONFIG_CPU_LC1860)
static struct v4l2_isp_parm gc2755_isp_parm = {
	.min_exposure = 0x03,
	.sensor_vendor = SENSOR_VENDOR_GALAXYCORE,
	.sensor_main_type = GC_2755,
	//.sensor_sub_type = 1,
};
struct isp_regb_vals {
	unsigned int reg;
	unsigned char value;
};

#if CONFIG_VIDEO_COMIP_ISP

static struct isp_regb_vals isp_exposure_l6[] = {
	{0x1c146, 0x0c},
	{0x1c5a0, 0x1c},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_exposure_l5[] = {
	{0x1c146, 0x14},
	{0x1c5a0, 0x24},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_l4[] = {
	{0x1c146, 0x1c},
	{0x1c5a0, 0x2c},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_l3[] = {
	{0x1c146, 0x24},
	{0x1c5a0, 0x34},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_exposure_l2[] = {
	{0x1c146, 0x2c},
	{0x1c5a0, 0x3c},
	{ISP_REG_END, 0x00},

};

static struct isp_regb_vals isp_exposure_l1[] = {
	{0x1c146, 0x34},
	{0x1c5a0, 0x44},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h0[] = {
	{0x1c146, 0x3c},
	{0x1c5a0, 0x4c},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h1[] = {
	{0x1c146, 0x4c},
	{0x1c5a0, 0x5c},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h2[] = {
	{0x1c146, 0x5c},
	{0x1c5a0, 0x6c},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_exposure_h3[] = {
	{0x1c146, 0x68},
	{0x1c5a0, 0x78},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h4[] = {
	{0x1c146, 0x74},
	{0x1c5a0, 0x84},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h5[] = {
	{0x1c146, 0x8c},
	{0x1c5a0, 0x9c},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_exposure_h6[] = {
	{0x1c146, 0x94},
	{0x1c5a0, 0x9f},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_100[] = {
	{0x1c150, 0x00}, //max gain
	{0x1c151, 0x14}, //max gain
	{0x1c154, 0x00}, //min gain
	{0x1c155, 0x10}, //min gain
	{0x1c4e0, 0x00},
	{0x1c4e1, 0x12},
	{0x1c4e2, 0x00},
	{0x1c4e3, 0x14},
	{0x1c4e4, 0x00},
	{0x1c4e5, 0x14},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_200[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x23},
	{0x1c154, 0x00},
	{0x1c155, 0x1d},
	{0x1c4e0, 0x00},
	{0x1c4e1, 0x20},
	{0x1c4e2, 0x00},
	{0x1c4e3, 0x23},
	{0x1c4e4, 0x00},
	{0x1c4e5, 0x23},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_400[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x44},
	{0x1c154, 0x00},
	{0x1c155, 0x3c},
	{0x1c4e0, 0x00},
	{0x1c4e1, 0x40},
	{0x1c4e2, 0x00},
	{0x1c4e3, 0x44},
	{0x1c4e4, 0x00},
	{0x1c4e5, 0x44},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_800[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x80},
	{0x1c154, 0x00},
	{0x1c155, 0x70},
	{0x1c4e0, 0x00},
	{0x1c4e1, 0x75},
	{0x1c4e2, 0x00},
	{0x1c4e3, 0x7d},
	{0x1c4e4, 0x00},
	{0x1c4e5, 0x80},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l4[] = {
	{0x1c4c0, 0x11},
	{0x1c4c1, 0x17},
	{0x1c4c2, 0x21},
	{0x1c4c3, 0x2c},
	{0x1c4c4, 0x38},
	{0x1c4c5, 0x41},
	{0x1c4c6, 0x47},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x6b},
	{0x1c4c9, 0x7b},
	{0x1c4ca, 0x86},
	{0x1c4cb, 0x9a},
	{0x1c4cc, 0xb0},
	{0x1c4cd, 0xc9},
	{0x1c4ce, 0xe4},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l3[] = {
	{0x1c4c0, 0x13},
	{0x1c4c1, 0x19},
	{0x1c4c2, 0x23},
	{0x1c4c3, 0x2e},
	{0x1c4c4, 0x3a},
	{0x1c4c5, 0x43},
	{0x1c4c6, 0x49},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x69},
	{0x1c4c9, 0x79},
	{0x1c4ca, 0x84},
	{0x1c4cb, 0x98},
	{0x1c4cc, 0xae},
	{0x1c4cd, 0xc7},
	{0x1c4ce, 0xe2},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l2[] = {
	{0x1c4c0, 0x15},
	{0x1c4c1, 0x1b},
	{0x1c4c2, 0x25},
	{0x1c4c3, 0x30},
	{0x1c4c4, 0x3c},
	{0x1c4c5, 0x45},
	{0x1c4c6, 0x4b},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x67},
	{0x1c4c9, 0x77},
	{0x1c4ca, 0x82},
	{0x1c4cb, 0x96},
	{0x1c4cc, 0xac},
	{0x1c4cd, 0xc5},
	{0x1c4ce, 0xe0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l1[] = {
	{0x1c4c0, 0x16},
	{0x1c4c1, 0x1c},
	{0x1c4c2, 0x26},
	{0x1c4c3, 0x31},
	{0x1c4c4, 0x3d},
	{0x1c4c5, 0x46},
	{0x1c4c6, 0x4c},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x66},
	{0x1c4c9, 0x76},
	{0x1c4ca, 0x81},
	{0x1c4cb, 0x95},
	{0x1c4cc, 0xab},
	{0x1c4cd, 0xc4},
	{0x1c4ce, 0xdf},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h0[] = {
	{0x1C4C0, 0x1c},
	{0x1C4C1, 0x2f},
	{0x1C4C2, 0x3e},
	{0x1C4C3, 0x4a},
	{0x1C4C4, 0x54},
	{0x1C4C5, 0x5d},
	{0x1C4C6, 0x66},
	{0x1C4C7, 0x70},
	{0x1C4C8, 0x7a},
	{0x1C4C9, 0x85},
	{0x1C4CA, 0x91},
	{0x1C4CB, 0xa0},
	{0x1C4CC, 0xb0},
	{0x1C4CD, 0xc5},
	{0x1C4CE, 0xdf},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h1[] = {
	{0x1c4c0, 0x19},
	{0x1c4c1, 0x1f},
	{0x1c4c2, 0x29},
	{0x1c4c3, 0x34},
	{0x1c4c4, 0x40},
	{0x1c4c5, 0x49},
	{0x1c4c6, 0x4f},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x63},
	{0x1c4c9, 0x73},
	{0x1c4ca, 0x7e},
	{0x1c4cb, 0x92},
	{0x1c4cc, 0xa8},
	{0x1c4cd, 0xc1},
	{0x1c4ce, 0xc2},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h2[] = {
	{0x1c4c0, 0x1a},
	{0x1c4c1, 0x20},
	{0x1c4c2, 0x2a},
	{0x1c4c3, 0x35},
	{0x1c4c4, 0x41},
	{0x1c4c5, 0x4a},
	{0x1c4c6, 0x50},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x62},
	{0x1c4c9, 0x72},
	{0x1c4ca, 0x7d},
	{0x1c4cb, 0x91},
	{0x1c4cc, 0xa7},
	{0x1c4cd, 0xc0},
	{0x1c4ce, 0xdb},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h3[] = {
	{0x1c4c0, 0x1b},
	{0x1c4c1, 0x21},
	{0x1c4c2, 0x2b},
	{0x1c4c3, 0x36},
	{0x1c4c4, 0x42},
	{0x1c4c5, 0x4b},
	{0x1c4c6, 0x51},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x61},
	{0x1c4c9, 0x71},
	{0x1c4ca, 0x7c},
	{0x1c4cb, 0x90},
	{0x1c4cc, 0xa6},
	{0x1c4cd, 0xbf},
	{0x1c4ce, 0xda},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h4[] = {
	{0x1c4c0, 0x1c},
	{0x1c4c1, 0x22},
	{0x1c4c2, 0x2c},
	{0x1c4c3, 0x37},
	{0x1c4c4, 0x43},
	{0x1c4c5, 0x4c},
	{0x1c4c6, 0x52},
	{0x1c4c7, 0x59},
	{0x1c4c8, 0x60},
	{0x1c4c9, 0x70},
	{0x1c4ca, 0x7b},
	{0x1c4cb, 0x8f},
	{0x1c4cc, 0xa5},
	{0x1c4cd, 0xbe},
	{0x1c4ce, 0xd9},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_l2[] = {
	{0x1c4eb, 0x60},
	{0x1c4ec, 0x58},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_l1[] = {
	{0x1c4eb, 0x70},
	{0x1c4ec, 0x68},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h0[] = {
	{0x1c4eb, 0x80},
	{0x1c4ec, 0x78},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h1[] = {
	{0x1c4eb, 0x90},
	{0x1c4ec, 0x88},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h2[] = {
	{0x1c4eb, 0xa0},
	{0x1c4ec, 0x98},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_aecgc_win_2M_matrix[] = {
	{0x66409, 0x01},//definiton ofthe center 3x3 window
	{0x6640a, 0x70},//nWin_Left = 368
	{0x6640d, 0x01},
	{0x6640e, 0x14},//nWin_Top = 276
	{0x66411, 0x02},
	{0x66412, 0xe0},//nWin_Width = 736
	{0x66415, 0x02},
	{0x66416, 0x28},//nWin_Height = 552

	{0x6642e, 0x01},//nWin_Weight_0 weight pass
	{0x6642f, 0x01},//nWin_Weight_1
	{0x66430, 0x01},//nWin_Weight_2
	{0x66431, 0x01},//nWin_Weight_3
	{0x66432, 0x01},//nWin_Weight_4
	{0x66433, 0x01},//nWin_Weight_5
	{0x66434, 0x01},//nWin_Weight_6
	{0x66435, 0x01},//nWin_Weight_7
	{0x66436, 0x01},//nWin_Weight_8
	{0x66437, 0x01},//nWin_Weight_9
	{0x66438, 0x01},//nWin_Weight_10
	{0x66439, 0x01},//nWin_Weight_11
	{0x6643a, 0x01},//nWin_Weight_12
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_aecgc_win_2M_center[] = {
	{0x66409, 0x01},//definiton ofthe center 3x3 window
	{0x6640a, 0x70},//nWin_Left = 368
	{0x6640d, 0x01},
	{0x6640e, 0x14},//nWin_Top = 276
	{0x66411, 0x02},
	{0x66412, 0xe0},//nWin_Width = 736
	{0x66415, 0x02},
	{0x66416, 0x28},//nWin_Height = 552

	{0x6642e, 0x00},//nWin_Weight_0 weight pass
	{0x6642f, 0x00},//nWin_Weight_1
	{0x66430, 0x00},//nWin_Weight_2
	{0x66431, 0x00},//nWin_Weight_3
	{0x66432, 0x01},//nWin_Weight_4
	{0x66433, 0x01},//nWin_Weight_5
	{0x66434, 0x01},//nWin_Weight_6
	{0x66435, 0x01},//nWin_Weight_7
	{0x66436, 0x08},//nWin_Weight_8
	{0x66437, 0x01},//nWin_Weight_9
	{0x66438, 0x01},//nWin_Weight_10
	{0x66439, 0x01},//nWin_Weight_11
	{0x6643a, 0x01},//nWin_Weight_12

	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_aecgc_win_2M_central_weight[] = {
	{0x66409, 0x01},//definiton ofthe center 3x3 window
	{0x6640a, 0x70},//nWin_Left = 368
	{0x6640d, 0x01},
	{0x6640e, 0x14},//nWin_Top = 276
	{0x66411, 0x02},
	{0x66412, 0xe0},//nWin_Width = 736
	{0x66415, 0x02},
	{0x66416, 0x28},//nWin_Height = 552

	{0x6642e, 0x01},//nWin_Weight_0 weight pass
	{0x6642f, 0x01},//nWin_Weight_1
	{0x66430, 0x01},//nWin_Weight_2
	{0x66431, 0x01},//nWin_Weight_3
	{0x66432, 0x05},//nWin_Weight_4
	{0x66433, 0x05},//nWin_Weight_5
	{0x66434, 0x05},//nWin_Weight_6
	{0x66435, 0x05},//nWin_Weight_7
	{0x66436, 0x0a},//nWin_Weight_8
	{0x66437, 0x05},//nWin_Weight_9
	{0x66438, 0x05},//nWin_Weight_10
	{0x66439, 0x05},//nWin_Weight_11
	{0x6643a, 0x05},//nWin_Weight_12
	{ISP_REG_END, 0x00},
};


static struct isp_regb_vals isp_white_balance_auto[] = {
	{0x1c17c, 0x01},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_daylight[] = {
	{0x1c17c, 0x03},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_cloudy_daylight[] = {
	{0x1c17c, 0x04},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_incandescent[] = {
	{0x1c17c, 0x06},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_fluorescent[] = {
	{0x1c17c, 0x05},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_warm_fluorescent[] = {
	{0x1c17c, 0x07},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_twilight[] = {
	{0x1c17c, 0x08},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_shade[] = {
	{0x1c17c, 0x09},
	{ISP_REG_END, 0x00},
};


static struct isp_regb_vals isp_brightness_l3[] = {
	{0x1c5ac, 0x20},
	{0x1c5ad, 0x20},
	{0x1c5ae, 0x20},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_l2[] = {
	{0x1c5ac, 0x40},
	{0x1c5ad, 0x40},
	{0x1c5ae, 0x40},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_l1[] = {
	{0x1c5ac, 0x60},
	{0x1c5ad, 0x60},
	{0x1c5ae, 0x60},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h0[] = {
	{0x1c5ac, 0x80},
	{0x1c5ad, 0x80},
	{0x1c5ae, 0x80},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h1[] = {
	{0x1c5ac, 0xa0},
	{0x1c5ad, 0xa0},
	{0x1c5ae, 0xa0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h2[] = {
	{0x1c5ac, 0xc0},
	{0x1c5ad, 0xc0},
	{0x1c5ae, 0xc0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h3[] = {
	{0x1c5ac, 0xe0},
	{0x1c5ad, 0xe0},
	{0x1c5ae, 0xe0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_l2[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x01},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_sharpness_l1[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x02},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h0[] = {
	{0x6560c, 0x01},
	{0x6560d, 0x03},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h1[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x13},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h2[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x23},
	{ISP_REG_END, 0x00},
};
#elif defined CONFIG_VIDEO_COMIP_ISP2
static struct isp_regb_vals isp_exposure_l2[] = {
	{0x1c146, 0x11},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_l1[] = {
	{0x1c146, 0x22},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h0[] = {
	{0x1c146, 0x44},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h1[] = {
	{0x1c146, 0x88},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_exposure_h2[] = {
	{0x1c146, 0xf0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_100[] = {
	{0x1c150, 0x00}, //max gain
	{0x1c151, 0x14}, //max gain
	{0x1c154, 0x00}, //min gain
	{0x1c155, 0x10}, //min gain
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_200[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x23},
	{0x1c154, 0x00},
	{0x1c155, 0x1d},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_400[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x44},
	{0x1c154, 0x00},
	{0x1c155, 0x3c},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_iso_800[] = {
	{0x1c150, 0x00},
	{0x1c151, 0x80},
	{0x1c154, 0x00},
	{0x1c155, 0x70},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l3[] = {
	{0x67200, 0x00},
	{0x67201, 0x48},
	{0x67202, 0x00},
	{0x67203, 0x87},
	{0x67204, 0x00},
	{0x67205, 0xDD},
	{0x67206, 0x01},
	{0x67207, 0x1E},

	{0x67208, 0x01},
	{0x67209, 0x54},
	{0x6720A, 0x01},
	{0x6720B, 0x83}, //387
	{0x6720C, 0x01},
	{0x6720D, 0xAD},
	{0x6720E, 0x01},
	{0x6720F, 0xD3},
	{0x67210, 0x01},
	{0x67211, 0xF6},
	{0x67212, 0x02},
	{0x67213, 0x17}, //535

	{0x67214, 0x02},
	{0x67215, 0x36},
	{0x67216, 0x02},
	{0x67217, 0x53},
	{0x67218, 0x02},
	{0x67219, 0x6F}, //623
	{0x6721A, 0x02},
	{0x6721B, 0x8A},
	{0x6721C, 0x02},
	{0x6721D, 0xA3},
	{0x6721E, 0x02},
	{0x6721F, 0xBB},
	{0x67220, 0x02},
	{0x67221, 0xD3},
	{0x67222, 0x02},
	{0x67223, 0xEA}, //746
	{0x67224, 0x03},
	{0x67225, 0x00},
	{0x67226, 0x03},
	{0x67227, 0x15},
	{0x67228, 0x03},
	{0x67229, 0x2A}, //810
	{0x6722A, 0x03},
	{0x6722B, 0x3E},
	{0x6722C, 0x03},
	{0x6722D, 0x51},
	{0x6722E, 0x03},
	{0x6722F, 0x65}, //869
	{0x67230, 0x03},
	{0x67231, 0x77},
	{0x67232, 0x03},
	{0x67233, 0x89},
	{0x67234, 0x03},
	{0x67235, 0x9B}, //923
	{0x67236, 0x03},
	{0x67237, 0xAD},
	{0x67238, 0x03},
	{0x67239, 0xBE},
	{0x6723A, 0x03},
	{0x6723B, 0xCF},
	{0x6723C, 0x03},
	{0x6723D, 0xDF},
	{0x6723E, 0x03},
	{0x6723F, 0xEF},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l2[] = {
	{0x67200, 0x00},
	{0x67201, 0x3C},
	{0x67202, 0x00},
	{0x67203, 0x75},
	{0x67204, 0x00},
	{0x67205, 0xC9}, //201
	{0x67206, 0x01},
	{0x67207, 0x0F},
	{0x67208, 0x01},
	{0x67209, 0x4F}, //335
	{0x6720A, 0x01},
	{0x6720B, 0x8A}, //394

	{0x6720C, 0x01},
	{0x6720D, 0xBE},
	{0x6720E, 0x01},
	{0x6720F, 0xEB}, //491
	{0x67210, 0x02},
	{0x67211, 0x15},
	{0x67212, 0x02},
	{0x67213, 0x3B}, //571

	{0x67214, 0x02},
	{0x67215, 0x5E}, //606
	{0x67216, 0x02},
	{0x67217, 0x7D},
	{0x67218, 0x02},
	{0x67219, 0x99}, //665
	{0x6721A, 0x02},
	{0x6721B, 0xB4},
	{0x6721C, 0x02},
	{0x6721D, 0xCE},
	{0x6721E, 0x02},
	{0x6721F, 0xE6}, //742
	{0x67220, 0x02},
	{0x67221, 0xFD},
	{0x67222, 0x03},
	{0x67223, 0x12}, //786
	{0x67224, 0x03},
	{0x67225, 0x26},
	{0x67226, 0x03},
	{0x67227, 0x39},
	{0x67228, 0x03},
	{0x67229, 0x4B}, //843

	{0x6722A, 0x03},
	{0x6722B, 0x5D},
	{0x6722C, 0x03},
	{0x6722D, 0x6E},
	{0x6722E, 0x03},
	{0x6722F, 0x7F}, //895
	{0x67230, 0x03},
	{0x67231, 0x8F},
	{0x67232, 0x03},
	{0x67233, 0x9E}, //926
	{0x67234, 0x03},
	{0x67235, 0xAD}, //941
	{0x67236, 0x03},
	{0x67237, 0xBC}, //956
	{0x67238, 0x03},
	{0x67239, 0xCA},
	{0x6723A, 0x03},
	{0x6723B, 0xD8},
	{0x6723C, 0x03},
	{0x6723D, 0xE5},
	{0x6723E, 0x03},
	{0x6723F, 0xF2},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_l1[] = {
	{0x67200, 0x00},
	{0x67201, 0x31},
	{0x67202, 0x00},
	{0x67203, 0x63},
	{0x67204, 0x00},
	{0x67205, 0xB6}, //182
	{0x67206, 0x01},
	{0x67207, 0x00},
	{0x67208, 0x01},
	{0x67209, 0x4A}, //330
	{0x6720A, 0x01},
	{0x6720B, 0x92}, //402

	{0x6720C, 0x01},
	{0x6720D, 0xCF},
	{0x6720E, 0x02},
	{0x6720F, 0x04}, //516
	{0x67210, 0x02},
	{0x67211, 0x34},
	{0x67212, 0x02},
	{0x67213, 0x5F}, //607

	{0x67214, 0x02},
	{0x67215, 0x85}, //645
	{0x67216, 0x02},
	{0x67217, 0xA7},
	{0x67218, 0x02},
	{0x67219, 0xC4}, //708
	{0x6721A, 0x02},
	{0x6721B, 0xDE}, //734
	{0x6721C, 0x02},
	{0x6721D, 0xF8},
	{0x6721E, 0x03},
	{0x6721F, 0x11}, //785
	{0x67220, 0x03},
	{0x67221, 0x26},
	{0x67222, 0x03},
	{0x67223, 0x3A}, //826
	{0x67224, 0x03},
	{0x67225, 0x4C},
	{0x67226, 0x03},
	{0x67227, 0x5D},
	{0x67228, 0x03},
	{0x67229, 0x6D}, //877

	{0x6722A, 0x03},
	{0x6722B, 0x7C},
	{0x6722C, 0x03},
	{0x6722D, 0x8B},
	{0x6722E, 0x03},
	{0x6722F, 0x99}, //921
	{0x67230, 0x03},
	{0x67231, 0xA7},
	{0x67232, 0x03},
	{0x67233, 0xB3}, //947
	{0x67234, 0x03},
	{0x67235, 0xC0}, //960
	{0x67236, 0x03},
	{0x67237, 0xCB}, //971
	{0x67238, 0x03},
	{0x67239, 0xD7},
	{0x6723A, 0x03},
	{0x6723B, 0xE2},
	{0x6723C, 0x03},
	{0x6723D, 0xEC},
	{0x6723E, 0x03},
	{0x6723F, 0xF6},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h0[] = {
	{0x67200, 0x00},
	{0x67201, 0x25},
	{0x67202, 0x00},
	{0x67203, 0x52},
	{0x67204, 0x00},
	{0x67205, 0xA2}, //162
	{0x67206, 0x00},
	{0x67207, 0xF1},
	{0x67208, 0x01},
	{0x67209, 0x46}, //326
	{0x6720A, 0x01},
	{0x6720B, 0x99}, //409

	{0x6720C, 0x01},
	{0x6720D, 0xE0},
	{0x6720E, 0x02},
	{0x6720F, 0x1C}, //540
	{0x67210, 0x02},
	{0x67211, 0x54},
	{0x67212, 0x02},
	{0x67213, 0x82}, //642

	{0x67214, 0x02},
	{0x67215, 0xAD}, //685
	{0x67216, 0x02},
	{0x67217, 0xD0},
	{0x67218, 0x02},
	{0x67219, 0xEE}, //750
	{0x6721A, 0x03},
	{0x6721B, 0x09}, //777
	{0x6721C, 0x03},
	{0x6721D, 0x23},
	{0x6721E, 0x03},
	{0x6721F, 0x3B}, //827
	{0x67220, 0x03},
	{0x67221, 0x50},
	{0x67222, 0x03},
	{0x67223, 0x62}, //866
	{0x67224, 0x03},
	{0x67225, 0x72},
	{0x67226, 0x03},
	{0x67227, 0x81},
	{0x67228, 0x03},
	{0x67229, 0x8F}, //911

	{0x6722A, 0x03},
	{0x6722B, 0x9C},
	{0x6722C, 0x03},
	{0x6722D, 0xA8},
	{0x6722E, 0x03},
	{0x6722F, 0xB3}, //947
	{0x67230, 0x03},
	{0x67231, 0xBE},
	{0x67232, 0x03},
	{0x67233, 0xC8}, //968
	{0x67234, 0x03},
	{0x67235, 0xD2}, //978
	{0x67236, 0x03},
	{0x67237, 0xDB}, //987
	{0x67238, 0x03},
	{0x67239, 0xE3},
	{0x6723A, 0x03},
	{0x6723B, 0xEB},
	{0x6723C, 0x03},
	{0x6723D, 0xF2},
	{0x6723E, 0x03},
	{0x6723F, 0xF9},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h1[] = {
	{0x67200, 0x00},
	{0x67201, 0x1D},
	{0x67202, 0x00},
	{0x67203, 0x46},
	{0x67204, 0x00},
	{0x67205, 0x95}, //149
	{0x67206, 0x00},
	{0x67207, 0xE7},
	{0x67208, 0x01},
	{0x67209, 0x43}, //323
	{0x6720A, 0x01},
	{0x6720B, 0x9E}, //414

	{0x6720C, 0x01},
	{0x6720D, 0xEB},
	{0x6720E, 0x02},
	{0x6720F, 0x2D}, //557
	{0x67210, 0x02},
	{0x67211, 0x68},
	{0x67212, 0x02},
	{0x67213, 0x9A}, //666

	{0x67214, 0x02},
	{0x67215, 0xC7}, //711
	{0x67216, 0x02},
	{0x67217, 0xEC},
	{0x67218, 0x03},
	{0x67219, 0x0A}, //778
	{0x6721A, 0x03},
	{0x6721B, 0x25}, //805
	{0x6721C, 0x03},
	{0x6721D, 0x3F},
	{0x6721E, 0x03},
	{0x6721F, 0x57}, //855
	{0x67220, 0x03},
	{0x67221, 0x6C},
	{0x67222, 0x03},
	{0x67223, 0x7D}, //893
	{0x67224, 0x03},
	{0x67225, 0x8C},
	{0x67226, 0x03},
	{0x67227, 0x99},
	{0x67228, 0x03},
	{0x67229, 0xA5}, //933

	{0x6722A, 0x03},
	{0x6722B, 0xB1},
	{0x6722C, 0x03},
	{0x6722D, 0x8B},
	{0x6722E, 0x03},
	{0x6722F, 0xC5}, //965
	{0x67230, 0x03},
	{0x67231, 0xCE},
	{0x67232, 0x03},
	{0x67233, 0xD6}, //982
	{0x67234, 0x03},
	{0x67235, 0xDE}, //990
	{0x67236, 0x03},
	{0x67237, 0xE5}, //997
	{0x67238, 0x03},
	{0x67239, 0xEC},
	{0x6723A, 0x03},
	{0x6723B, 0xF1},
	{0x6723C, 0x03},
	{0x6723D, 0xF6},
	{0x6723E, 0x03},
	{0x6723F, 0xFB},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h2[] = {
	{0x67200, 0x00},
	{0x67201, 0x16},
	{0x67202, 0x00},
	{0x67203, 0x3A},
	{0x67204, 0x00},
	{0x67205, 0x87},
	{0x67206, 0x00},
	{0x67207, 0xDE},
	{0x67208, 0x01},
	{0x67209, 0x40},
	{0x6720A, 0x01},
	{0x6720B, 0xA3},

	{0x6720C, 0x01},
	{0x6720D, 0xF7},
	{0x6720E, 0x02},
	{0x6720F, 0x3D},
	{0x67210, 0x02},
	{0x67211, 0x7D},
	{0x67212, 0x02},
	{0x67213, 0xB2},

	{0x67214, 0x02},
	{0x67215, 0xE2},
	{0x67216, 0x03},
	{0x67217, 0x08},
	{0x67218, 0x03},
	{0x67219, 0x26},
	{0x6721A, 0x03},
	{0x6721B, 0x41},
	{0x6721C, 0x03},
	{0x6721D, 0x5C},
	{0x6721E, 0x03},
	{0x6721F, 0x74},
	{0x67220, 0x03},
	{0x67221, 0x88},
	{0x67222, 0x03},
	{0x67223, 0x98},
	{0x67224, 0x03},
	{0x67225, 0xA5},
	{0x67226, 0x03},
	{0x67227, 0xB1},
	{0x67228, 0x03},
	{0x67229, 0xBC},
	{0x6722A, 0x03},
	{0x6722B, 0xC5},
	{0x6722C, 0x03},
	{0x6722D, 0xCE},
	{0x6722E, 0x03},
	{0x6722F, 0xD6},
	{0x67230, 0x03},
	{0x67231, 0xDE},
	{0x67232, 0x03},
	{0x67233, 0xE4},
	{0x67234, 0x03},
	{0x67235, 0xEA},
	{0x67236, 0x03},
	{0x67237, 0xEF},
	{0x67238, 0x03},
	{0x67239, 0xF4},
	{0x6723A, 0x03},
	{0x6723B, 0xF8},
	{0x6723C, 0x03},
	{0x6723D, 0xFB},
	{0x6723E, 0x03},
	{0x6723F, 0xFD},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_contrast_h3[] = {
	{0x67200, 0x00},
	{0x67201, 0x0E},
	{0x67202, 0x00},
	{0x67203, 0x2E},
	{0x67204, 0x00},
	{0x67205, 0x7A},
	{0x67206, 0x00},
	{0x67207, 0xD4},
	{0x67208, 0x01},
	{0x67209, 0x3C},
	{0x6720A, 0x01},
	{0x6720B, 0xA8},

	{0x6720C, 0x02},
	{0x6720D, 0x02},
	{0x6720E, 0x02},
	{0x6720F, 0x4E},
	{0x67210, 0x02},
	{0x67211, 0x92},
	{0x67212, 0x02},
	{0x67213, 0xCA},

	{0x67214, 0x02},
	{0x67215, 0xFC},
	{0x67216, 0x03},
	{0x67217, 0x24},
	{0x67218, 0x03},
	{0x67219, 0x42},
	{0x6721A, 0x03},
	{0x6721B, 0x5E},
	{0x6721C, 0x03},
	{0x6721D, 0x78},
	{0x6721E, 0x03},
	{0x6721F, 0x90},
	{0x67220, 0x03},
	{0x67221, 0xA4},
	{0x67222, 0x03},
	{0x67223, 0xB3},
	{0x67224, 0x03},
	{0x67225, 0xBF},
	{0x67226, 0x03},
	{0x67227, 0xC9},
	{0x67228, 0x03},
	{0x67229, 0xD2},

	{0x6722A, 0x03},
	{0x6722B, 0xDA},
	{0x6722C, 0x03},
	{0x6722D, 0xE2},
	{0x6722E, 0x03},
	{0x6722F, 0xE8},
	{0x67230, 0x03},
	{0x67231, 0xEE},
	{0x67232, 0x03},
	{0x67233, 0xF2},
	{0x67234, 0x03},
	{0x67235, 0xF6},
	{0x67236, 0x03},
	{0x67237, 0xFA},
	{0x67238, 0x03},
	{0x67239, 0xFC},
	{0x6723A, 0x03},
	{0x6723B, 0xFE},
	{0x6723C, 0x03},
	{0x6723D, 0xFF},
	{0x6723E, 0x03},
	{0x6723F, 0xFF},
	{0x67240, 0x03},
	{0x67241, 0xFF},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_l2[] = {
	{0x1c4eb, 0x60},
	{0x1c4ec, 0x50},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_l1[] = {
	{0x1c4eb, 0x70},
	{0x1c4ec, 0x60},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h0[] = {
	{0x1c4eb, 0x80},
	{0x1c4ec, 0x70},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h1[] = {
	{0x1c4eb, 0x90},
	{0x1c4ec, 0x80},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_saturation_h2[] = {
	{0x1c4eb, 0xa0},
	{0x1c4ec, 0x90},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_auto[] = {
	{0x1c190, 0x02}, //enable white balance
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_daylight[] = {
	{0x1c190, 0x03},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_cloudy_daylight[] = {
	{0x1c190, 0x04},
	{ISP_REG_END, 0x00},
};
static struct isp_regb_vals isp_white_balance_incandescent[] = {
	{0x1c190, 0x06},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_fluorescent[] = {
	{0x1c190, 0x05},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_warm_fluorescent[] = {
	{0x1c190, 0x07},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_twilight[] = {
	{0x1c190, 0x08},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_white_balance_shade[] = {
	{0x1c190, 0x09},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_l3[] = {
	{0x1c1c5, 0x20},
	{0x1c1c6, 0x20},
	{0x1c1c7, 0x20},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_l2[] = {
	{0x1c1c5, 0x40},
	{0x1c1c6, 0x40},
	{0x1c1c7, 0x40},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_l1[] = {
	{0x1c1c5, 0x60},
	{0x1c1c6, 0x60},
	{0x1c1c7, 0x60},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h0[] = {
	{0x1c1c5, 0x80},
	{0x1c1c6, 0x80},
	{0x1c1c7, 0x80},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h1[] = {
	{0x1c1c5, 0xa0},
	{0x1c1c6, 0xa0},
	{0x1c1c7, 0xa0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h2[] = {
	{0x1c1c5, 0xc0},
	{0x1c1c6, 0xc0},
	{0x1c1c7, 0xc0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_brightness_h3[] = {
	{0x1c1c5, 0xe0},
	{0x1c1c6, 0xe0},
	{0x1c1c7, 0xe0},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_l2[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x0b},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_l1[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x10},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h0[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x18},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h1[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x20},
	{ISP_REG_END, 0x00},
};

static struct isp_regb_vals isp_sharpness_h2[] = {
	{0x6560c, 0x00},
	{0x6560d, 0x30},
	{ISP_REG_END, 0x00},
};
#endif

static const struct v4l2_isp_regval gc2755_isp_setting[] = {
		// wingtech ov5648 isp performance setting
		// module No.5
		// rg ratio typical: 0x180
		// bg ratio typical: 0x16e
	
		// add for hdr
		{0x1c470, 0x01},
		{0x1c471, 0x00},
		// add end
	
		/* frame out : use mipi 0 */
		{0x63108, 0x04},
		/* system initial */
		{0x63022, 0x84},//RAW10 input
		{0x63023, 0x44},//sensor clk  4:/8	2:/2  8:/6
		{0x63800, 0x01},
		{0x63b34, 0x23},//overflow_dely_en
		{0x65800, 0x00},
		{0x65023, 0x41},//yuv dcw
	
		{0x60100, 0x01},//Software reset
		{0x6301b, 0xf0},//isp clock enable
		{0x63025, 0x40},//clock divider
		{0x63c12, 0x01},//data type
		{0x63c13, 0x22},//divider
		{0x63c14, 0x01},//men_thre
		{0x63c15, 0x53},//mem valid high&low number
	
	
		/* ISP TOP REG */
	
		{0x1c5de, 0x00},//ov mode
		
		{0x65000, 0x3f},
		{0x65001, 0x6f},//turn off local boost
		{0x65002, 0x9b},
		{0x65003, 0xff},
		//{0x65004, 0x21},//turn on EDR
		{0x65005, 0x52},
		{0x65006, 0x02},
		{0x65008, 0x00},
		{0x65009, 0x00},
	
	
	
		/* global setting */
		{0x65004, 0x20},//disable edr
		{0x1d998, 0x01},//disable manual blc trigger
	
		/* aecagc */
	
		{0x1c174, 0x01},
		{0x1c139, 0x01},
		{0x1c179, 0x00},
	
		/* dynamic frame rate */
		{0x1c13a, 0x01},// turn on
		{0x1c17b, 0x03},// minimum 7.5 fps
	
		/* aecagc sensor address */
		{0x1c528, 0x6c},//pSensorDeviceID[0]
		{0x1c529, 0x6c},
		{0x1c52a, 0x09},//pSensorI2COption[0]
		{0x1c52b, 0x09},
		{0x1c52c, 0x35},
		{0x1c52d, 0x00},
		{0x1c52e, 0x35},
		{0x1c52f, 0x01},
		{0x1c530, 0x35},
		{0x1c531, 0x02},
		{0x1c534, 0x38},//vts 1
		{0x1c535, 0x0e},
		{0x1c536, 0x38},//vts 2
		{0x1c537, 0x0f},
		{0x1c538, 0x35},
		{0x1c539, 0x0a},
		{0x1c53a, 0x35},
		{0x1c53b, 0x0b},
		{0x1c55c, 0xff},
		{0x1c55d, 0xff},
		{0x1c55e, 0xff},
		//{0x1c55f, 0x00},
		{0x1c560, 0xff},
		{0x1c561, 0xff},
		{0x1c562, 0xff},
		{0x1c563, 0xff},
	
		{0x1c146, 0x2c},//ori0x30 low AE target
		{0x1c14a, 0x03},
		{0x1c14b, 0x0a},
		{0x1c14c, 0x0a},//aec fast step//
		{0x1c14e, 0x08},//slow step
		
		{0x1c140, 0x01},//banding
		
		{0x1c13f, 0x02},
		
		{0x1c164, 0x0f},//60Hz banding step //banding * 16
		{0x1c165, 0x80},
		{0x1c166, 0x12},//50Hz banding step // banding * 16
		{0x1c167, 0xc0},
		
		{0x1c176, 0x03},//VTS
		{0x1c177, 0xd8},
		{0x1c150, 0x00},//max gain
		{0x1c151, 0x40},
		{0x1c154, 0x00},//min gain
		{0x1c155, 0x10},
		{0x1c158, 0x03},//max exposure
		{0x1c159, 0xb8},
		{0x1c15c, 0x00},//min expousre
		{0x1c15d, 0x02},
		
		{0x1c13e, 0x02},//real gain mode
	
		{0x66401, 0x00},
		{0x66402, 0x30},//StatWin_Left
		{0x66403, 0x00},
		{0x66404, 0x2c},//StatWin_Top
		{0x66405, 0x00},
		{0x66406, 0x30},//StatWin_Right
		{0x66407, 0x00},
		{0x66408, 0x34},//StatWin_Bottom
		{0x66409, 0x00},//definiton ofthe center 3x3 window
		{0x6640a, 0xc8},//nWin_Left = 200
		{0x6640d, 0x00},
		{0x6640e, 0x96},//nWin_Top = 150
		{0x66411, 0x03},
		{0x66412, 0x70},//nWin_Width = 880
		{0x66415, 0x02},
		{0x66416, 0x94},//nWin_Height = 660
		{0x6642e, 0x01},//nWin_Weight_0 weight pass
		{0x6642f, 0x01},//nWin_Weight_1
		{0x66430, 0x01},//nWin_Weight_2
		{0x66431, 0x01},//nWin_Weight_3
		{0x66432, 0x02},//nWin_Weight_4
		{0x66433, 0x02},//nWin_Weight_5
		{0x66434, 0x02},//nWin_Weight_6
		{0x66435, 0x02},//nWin_Weight_7
		{0x66436, 0x04},//nWin_Weight_8
		{0x66437, 0x02},//nWin_Weight_9
		{0x66438, 0x02},//nWin_Weight_10
		{0x66439, 0x02},//nWin_Weight_11
		{0x6643a, 0x02},//nWin_Weight_12
		{0x6644e, 0x03},//nWin_Weight_Shift
		{0x6644f, 0x04},//black level
		{0x66450, 0xf8},//saturate level
		{0x6645b, 0x1a},//black weight1
		{0x6645d, 0x1a},//black weight2
		{0x66460, 0x04},//saturate per1
		{0x66464, 0x0a},//saturate per2
		{0x66467, 0x14},//saturate weight1
		{0x66469, 0x14},//saturate weight2
		//auto AE control
	
		/* Raw Stretch */
		{0x65020, 0x01},//RAW Stretch Target
		{0x66500, 0x28},
		{0x66501, 0x03},
		{0x66502, 0x80},
		{0x66503, 0x1f},
		{0x1c1b0, 0xff},
		{0x1c1b1, 0xff},
		{0x1c1b2, 0x01},
		{0x65905, 0x08},
		{0x66301, 0x02},//high level step
		{0x66302, 0xd0},//ref bin
		{0x66303, 0x0a},//PsPer0
		{0x66304, 0x20},//PsPer1
		{0x1c5a4, 0x01},//use new high stretch !!!
		{0x1c5a5, 0x20},//stretch low step
		{0x1c5a6, 0x20},//stretch high step
		{0x1c5a7, 0x08},//stretch slow range
		{0x1c5a8, 0x02},//stretch slow step
		{0x1c1b8, 0x08},//ratio scale
	
		{0x1c5a0, 0x4c},//AE target high!!!
		{0x1c5a2, 0x08},//target stable range
		{0x1c5a3, 0x06},//stretch target slow range
		{0x1c174, 0x00},
	#if 0
		/* De-noise */
		{0x65604, 0x00},//
		{0x65605, 0x00},//
		{0x65606, 0x00},//
		{0x65607, 0x00},//
		
		{0x65510, 0x0f},//G dns slope change from 0x4 to 0xf
		{0x6551a, 0x08},//Raw G Dns, 1x
		{0x6551b, 0x10},//2x
		{0x6551c, 0x40},//4x
		{0x6551d, 0xc0},//8x
		{0x6551e, 0xff},//16x
		{0x6551f, 0xff},//32x
		{0x65520, 0xff},//64x
		{0x65522, 0x00},//RAW BR De-noise
		{0x65523, 0x04},
		{0x65524, 0x00},
		{0x65525, 0x08},
		{0x65526, 0x00},
		{0x65527, 0x10},
		{0x65528, 0x00},
		{0x65529, 0x20},
		{0x6552a, 0x00},
		{0x6552b, 0x20},
		{0x6552c, 0x00},
		{0x6552d, 0x20},
		{0x6552e, 0x00},
		{0x6552f, 0x20},
		
		{0x65c00, 0x1f},//UV De-noise
		{0x65c01, 0x1f},
		{0x65c02, 0x1f},
		{0x65c03, 0x1f},
		{0x65c04, 0x1f},
		{0x65c05, 0x1f},
		
		{0x65614, 0x06},//high-frequency_denoise//M_threshold
		{0x65615, 0x14},//H_threshod
		{0x65619, 0xff},//L_threshold
#endif

		/* De-noise */
		{0x65604, 0x00},//Richard for new curve 0314
		{0x65605, 0x00},//Richard for new curve 0314
		{0x65606, 0x00},//Richard for new curve 0314
		{0x65607, 0x00},//Richard for new curve 0314
	
		{0x65510, 0x0f},//G dns slope change from 0x4 to 0xf Richard 0320
		{0x6551a, 0x08},//Raw G Dns, Richard 0320
		{0x6551b, 0x0a},//Richard for new curve 0320
		{0x6551c, 0x0c},//Richard for new curve 0320
		{0x6551d, 0x0e},//Richard for new curve 0320
		{0x6551e, 0x0f},//Richard for new curve 0320
		{0x6551f, 0x0f},//Richard for new curve 0314
		{0x65520, 0x0f},//Richard for new curve 0314
		{0x65522, 0x00},//RAW BR De-noise
		{0x65523, 0x04},
		{0x65524, 0x00},
		{0x65525, 0x08},
		{0x65526, 0x00},
		{0x65527, 0x10},
		{0x65528, 0x00},
		{0x65529, 0x20},
		{0x6552a, 0x00},
		{0x6552b, 0x20},
		{0x6552c, 0x00},
		{0x6552d, 0x20},
		{0x6552e, 0x00},
		{0x6552f, 0x20},
	
		{0x65c00, 0x02},//UV De-noise
		{0x65c01, 0x06},
		{0x65c02, 0x0a},
		{0x65c03, 0x10},
		{0x65c04, 0x1f},
		{0x65c05, 0x1f},

	
		/* sharpeness */
		{0x65600, 0x00},
		{0x65601, 0x40},//0920
		{0x65602, 0x00},
		{0x65603, 0x60},//0920 !!!
		{0x65608, 0x06},
		{0x65609, 0x20},
		{0x6560c, 0x06},
		{0x6560d, 0x18},//
		{0x6560e, 0x10},//MinSharpenTp
		{0x6560f, 0x60},//MaxSharpenTp
		{0x65610, 0x10},//MinSharpenTm
		{0x65611, 0x60},//MaxSharpenTm
		{0x65613, 0x14},//SharpenAlpha
		{0x65615, 0x08},//HFreq_thre
		{0x65617, 0x06},//HFreq_coef
	
		/* auto uv saturation */
		{0x1c4e8, 0x01},//Enable
		{0x1c4e9, 0x50},//0920
		{0x1c4ea, 0x70},//0920
		{0x1c4eb, 0x80}, //keep back for new cmx 0310
		{0x1c4ec, 0x78}, //keep back for new cmx 0310
	
	
		/* Global Gamma */
		{0x1c49b, 0x01},
		{0x1c49c, 0x02},
		{0x1c49d, 0x21}, //gamma 2.0 0310
		{0x1c49e, 0x02},
		{0x1c49f, 0x21}, //gamma 2.0 0310
		{0x1c4a0, 0x00},
		{0x1c4a1, 0x18},
		{0x1c4a2, 0x00},
		{0x1c4a3, 0xa0}, //gamma 2.0 0310 //avoid false contour Richard@0323
	
		/* BLC */
		{0x1c58b, 0x10},//avoid false contour Richard@0323
		{0x1c58c, 0x10},//avoid false contour Richard@0323
	
		/* Tone Mapping */
		//contrast curve 21
		{0x1C4C0, 0x19},
		{0x1C4C1, 0x21},
		{0x1C4C2, 0x29},
		{0x1C4C3, 0x30},
		{0x1C4C4, 0x3a},
		{0x1C4C5, 0x44},
		{0x1C4C6, 0x4e},
		{0x1C4C7, 0x59},
		{0x1C4C8, 0x65},
		{0x1C4C9, 0x74},
		{0x1C4CA, 0x85},
		{0x1C4CB, 0x99},
		{0x1C4CC, 0xaf},
		{0x1C4CD, 0xC8},
		{0x1C4CE, 0xe3},
		{0x1c4d4, 0x20},//EDR scale
		{0x1c4d5, 0x20},//EDR scale
		{0x1c4cf, 0x80},
		{0x65a00, 0x1b},
		{0x65a01, 0xc0},
	
		//dark boost
		{0x1c4b0, 0x02},
		{0x1c4b1, 0x80},
	
		//curve gain control
		{0x1c1b3, 0x60}, //Gain thre1 0920
		{0x1c1b4, 0xd0},	//Gain thre2 0920
		{0x1c1b5, 0x01}, //EDR gain control
		{0x1c1b6, 0x01}, //Curve Gain control
		{0x1c1b7, 0x40}, //after gamma cut ratio
	
		//Manual UV curve 22
		{0x1C998, 0x01},
		
		{0x1C999, 0x27},
		{0x1C99A, 0x01},
		{0x1C99B, 0x3b},
		{0x1C99C, 0x01},
		{0x1C99D, 0x40},
		{0x1C99E, 0x01},
		{0x1C99F, 0x40},
		{0x1C9A0, 0x01},
		{0x1C9A1, 0x40},
		{0x1C9A2, 0x01},
		{0x1C9A3, 0x40},
		{0x1C9A4, 0x01},
		{0x1C9A5, 0x40},
		{0x1C9A6, 0x01},
		{0x1C9A7, 0x40},
		{0x1C9A8, 0x01},
		{0x1C9A9, 0x40},
		{0x1C9AA, 0x01},
		{0x1C9AB, 0x40},
		{0x1C9AC, 0x01},
		{0x1C9AD, 0x40},
		{0x1C9AE, 0x01},
		{0x1C9AF, 0x3E},
		{0x1C9B0, 0x01},
		{0x1C9B1, 0x31},
		{0x1C9B2, 0x01},
		{0x1C9B3, 0x13},
		{0x1C9B4, 0x00},
		{0x1C9B5, 0xE6},
		{0x1C9B6, 0x00},
		{0x1C9B7, 0xAA},
	
		/* LENC */
		{0x1c247, 0x02},//3 profile 0920
		{0x1c24c, 0x00},
		{0x1c24d, 0x40},
		{0x1c24e, 0x00},
		{0x1c24f, 0x80},
		{0x1c248, 0x40},
		{0x1c24a, 0x20},
		{0x1c574, 0x00},
		{0x1c575, 0x20},
		{0x1c576, 0x00},
		{0x1c577, 0xf0},
		{0x1c578, 0x40},
	
		{0x65200, 0x0d},
		{0x65206, 0x3c},
		{0x65207, 0x04},
		{0x65208, 0x3e},
		{0x65209, 0x02},
		{0x6520a, 0x36},
		{0x6520b, 0x0c},
		{0x65214, 0x28},
		{0x65216, 0x20},
	
		/* OVISP LENC setting for A light Long Exposure (HDR/3D) */

		// *****************LENC **************************//
		//;OVISP LENC setting for A light Long Exposure (HDR/3D)
		{0x1c310, 0x3f},
		{0x1c311, 0x1e},
		{0x1c312, 0x16},
		{0x1c313, 0x1a},
		{0x1c314, 0x2c},
		{0x1c315, 0x3f},
		{0x1c316, 0x06},
		{0x1c317, 0x05},
		{0x1c318, 0x05},
		{0x1c319, 0x05},
		{0x1c31a, 0x05},
		{0x1c31b, 0x06},
		{0x1c31c, 0x06},
		{0x1c31d, 0x03},
		{0x1c31e, 0x01},
		{0x1c31f, 0x01},
		{0x1c320, 0x03},
		{0x1c321, 0x06},
		{0x1c322, 0x05},
		{0x1c323, 0x01},
		{0x1c324, 0x00},
		{0x1c325, 0x00},
		{0x1c326, 0x02},
		{0x1c327, 0x05},
		{0x1c328, 0x08},
		{0x1c329, 0x06},
		{0x1c32a, 0x05},
		{0x1c32b, 0x05},
		{0x1c32c, 0x06},
		{0x1c32d, 0x06},
		{0x1c32e, 0x1b},
		{0x1c32f, 0x0e},
		{0x1c330, 0x0d},
		{0x1c331, 0x0c},
		{0x1c332, 0x12},
		{0x1c333, 0x35},
		{0x1c334, 0x3f},
		{0x1c335, 0x24},
		{0x1c336, 0x23},
		{0x1c337, 0x29},
		{0x1c338, 0x3f},
		{0x1c339, 0x25},
		{0x1c33a, 0x27},
		{0x1c33b, 0x28},
		{0x1c33c, 0x26},
		{0x1c33d, 0x1c},
		{0x1c33e, 0x29},
		{0x1c33f, 0x25},
		{0x1c340, 0x23},
		{0x1c341, 0x25},
		{0x1c342, 0x28},
		{0x1c343, 0x24},
		{0x1c344, 0x26},
		{0x1c345, 0x26},
		{0x1c346, 0x25},
		{0x1c347, 0x1e},
		{0x1c348, 0x36},
		{0x1c349, 0x25},
		{0x1c34a, 0x25},
		{0x1c34b, 0x24},
		{0x1c34c, 0x3f},
		{0x1c34d, 0x2b},
		{0x1c34e, 0x36},
		{0x1c34f, 0x39},
		{0x1c350, 0x35},
		{0x1c351, 0x29},
		{0x1c352, 0x2f},
		{0x1c353, 0x2a},
		{0x1c354, 0x27},
		{0x1c355, 0x2b},
		{0x1c356, 0x2f},
		{0x1c357, 0x27},
		{0x1c358, 0x1f},
		{0x1c359, 0x1d},
		{0x1c35a, 0x20},
		{0x1c35b, 0x29},
		{0x1c35c, 0x2e},
		{0x1c35d, 0x28},
		{0x1c35e, 0x25},
		{0x1c35f, 0x29},
		{0x1c360, 0x2f},
		{0x1c361, 0x2e},
		{0x1c362, 0x35},
		{0x1c363, 0x36},
		{0x1c364, 0x34},
		{0x1c365, 0x2c},

		//;OVISP LENC setting for CWF light Long Exposure (HDR/3D)
		{0x1c2ba, 0x3f},
		{0x1c2bb, 0x1e},
		{0x1c2bc, 0x15},
		{0x1c2bd, 0x18},
		{0x1c2be, 0x29},
		{0x1c2bf, 0x3f},
		{0x1c2c0, 0x05},
		{0x1c2c1, 0x05},
		{0x1c2c2, 0x04},
		{0x1c2c3, 0x04},
		{0x1c2c4, 0x04},
		{0x1c2c5, 0x05},
		{0x1c2c6, 0x06},
		{0x1c2c7, 0x02},
		{0x1c2c8, 0x01},
		{0x1c2c9, 0x01},
		{0x1c2ca, 0x03},
		{0x1c2cb, 0x06},
		{0x1c2cc, 0x04},
		{0x1c2cd, 0x01},
		{0x1c2ce, 0x00},
		{0x1c2cf, 0x00},
		{0x1c2d0, 0x01},
		{0x1c2d1, 0x05},
		{0x1c2d2, 0x08},
		{0x1c2d3, 0x06},
		{0x1c2d4, 0x04},
		{0x1c2d5, 0x05},
		{0x1c2d6, 0x05},
		{0x1c2d7, 0x06},
		{0x1c2d8, 0x1d},
		{0x1c2d9, 0x0e},
		{0x1c2da, 0x0d},
		{0x1c2db, 0x0c},
		{0x1c2dc, 0x12},
		{0x1c2dd, 0x36},
		{0x1c2de, 0x3f},
		{0x1c2df, 0x20},
		{0x1c2e0, 0x21},
		{0x1c2e1, 0x24},
		{0x1c2e2, 0x3f},
		{0x1c2e3, 0x21},
		{0x1c2e4, 0x24},
		{0x1c2e5, 0x24},
		{0x1c2e6, 0x23},
		{0x1c2e7, 0x1a},
		{0x1c2e8, 0x25},
		{0x1c2e9, 0x22},
		{0x1c2ea, 0x22},
		{0x1c2eb, 0x22},
		{0x1c2ec, 0x25},
		{0x1c2ed, 0x21},
		{0x1c2ee, 0x23},
		{0x1c2ef, 0x23},
		{0x1c2f0, 0x22},
		{0x1c2f1, 0x1c},
		{0x1c2f2, 0x32},
		{0x1c2f3, 0x23},
		{0x1c2f4, 0x23},
		{0x1c2f5, 0x21},
		{0x1c2f6, 0x3f},
		{0x1c2f7, 0x3a},
		{0x1c2f8, 0x30},
		{0x1c2f9, 0x32},
		{0x1c2fa, 0x32},
		{0x1c2fb, 0x3f},
		{0x1c2fc, 0x25},
		{0x1c2fd, 0x23},
		{0x1c2fe, 0x22},
		{0x1c2ff, 0x23},
		{0x1c300, 0x22},
		{0x1c301, 0x24},
		{0x1c302, 0x20},
		{0x1c303, 0x1f},
		{0x1c304, 0x20},
		{0x1c305, 0x25},
		{0x1c306, 0x25},
		{0x1c307, 0x23},
		{0x1c308, 0x21},
		{0x1c309, 0x23},
		{0x1c30a, 0x24},
		{0x1c30b, 0x2e},
		{0x1c30c, 0x2b},
		{0x1c30d, 0x2b},
		{0x1c30e, 0x2b},
		{0x1c30f, 0x34},

		//OVIS, 0x LENC setting for DAY light Long Exposure (HDR/3D)
		{0x1c264, 0x3f},
		{0x1c265, 0x1c},
		{0x1c266, 0x15},
		{0x1c267, 0x17},
		{0x1c268, 0x27},
		{0x1c269, 0x3f},
		{0x1c26a, 0x05},
		{0x1c26b, 0x05},
		{0x1c26c, 0x04},
		{0x1c26d, 0x04},
		{0x1c26e, 0x04},
		{0x1c26f, 0x05},
		{0x1c270, 0x06},
		{0x1c271, 0x02},
		{0x1c272, 0x01},
		{0x1c273, 0x01},
		{0x1c274, 0x03},
		{0x1c275, 0x06},
		{0x1c276, 0x04},
		{0x1c277, 0x01},
		{0x1c278, 0x00},
		{0x1c279, 0x00},
		{0x1c27a, 0x01},
		{0x1c27b, 0x05},
		{0x1c27c, 0x07},
		{0x1c27d, 0x06},
		{0x1c27e, 0x05},
		{0x1c27f, 0x05},
		{0x1c280, 0x05},
		{0x1c281, 0x05},
		{0x1c282, 0x1c},
		{0x1c283, 0x0e},
		{0x1c284, 0x0d},
		{0x1c285, 0x0c},
		{0x1c286, 0x11},
		{0x1c287, 0x33},
		{0x1c288, 0x24},
		{0x1c289, 0x1c},
		{0x1c28a, 0x1c},
		{0x1c28b, 0x1d},
		{0x1c28c, 0x2a},
		{0x1c28d, 0x20},
		{0x1c28e, 0x20},
		{0x1c28f, 0x21},
		{0x1c290, 0x20},
		{0x1c291, 0x1e},
		{0x1c292, 0x20},
		{0x1c293, 0x20},
		{0x1c294, 0x20},
		{0x1c295, 0x20},
		{0x1c296, 0x20},
		{0x1c297, 0x1f},
		{0x1c298, 0x20},
		{0x1c299, 0x20},
		{0x1c29a, 0x1f},
		{0x1c29b, 0x1d},
		{0x1c29c, 0x22},
		{0x1c29d, 0x1e},
		{0x1c29e, 0x1e},
		{0x1c29f, 0x1d},
		{0x1c2a0, 0x26},
		{0x1c2a1, 0x3f},
		{0x1c2a2, 0x38},
		{0x1c2a3, 0x38},
		{0x1c2a4, 0x3b},
		{0x1c2a5, 0x3f},
		{0x1c2a6, 0x29},
		{0x1c2a7, 0x27},
		{0x1c2a8, 0x25},
		{0x1c2a9, 0x27},
		{0x1c2aa, 0x26},
		{0x1c2ab, 0x27},
		{0x1c2ac, 0x20},
		{0x1c2ad, 0x1e},
		{0x1c2ae, 0x20},
		{0x1c2af, 0x29},
		{0x1c2b0, 0x2a},
		{0x1c2b1, 0x26},
		{0x1c2b2, 0x24},
		{0x1c2b3, 0x26},
		{0x1c2b4, 0x28},
		{0x1c2b5, 0x36},
		{0x1c2b6, 0x33},
		{0x1c2b7, 0x33},
		{0x1c2b8, 0x32},
		{0x1c2b9, 0x3f},
		/* AWB */
		{0x66201, 0x52},
		{0x66203, 0x10},//crop window
		{0x66211, 0xe8},//awb top limit
		{0x66212, 0x04},//awb bottom limit
	
		{0x1c17c, 0x01},//CT mode
		{0x1c182, 0x03},
		{0x1c183, 0x00},//MinNum
		{0x1c184, 0x04},//AWB Step
		{0x1c58d, 0x00},//LimitAWBAtD65Enable
	
		{0x1c1be, 0x00},//AWB offset
		{0x1c1bf, 0x00},
		{0x1c1c0, 0x00},
		{0x1c1c1, 0x00},
	
		{0x1c1aa, 0x00},//avgAllEnable
		{0x1c1ad, 0x02},//weight of A
		{0x1c1ae, 0x10},//weight of D65
		{0x1c1af, 0x04},//weight of CWF
	
		{0x1c5ac, 0x80},//pre-gain
		{0x1c5ad, 0x80},
		{0x1c5ae, 0x80},
	
		{0x1d948, 0x02}, //PreviewColorShiftType
		{0x1d94a, 0x00}, //AWBoffset2
		{0x1d94b, 0x00},
		{0x1d94c, 0x00},
		{0x1d94d, 0x00},
		{0x1d94e, 0x00},
		{0x1d94f, 0x00},
	
		{0x1ccce, 0x02},//awb shift
		
		
		{0x1ccce, 0x02},//awb shift
		
		{0x1cccf, 0x85},//B gain for A
		{0x1ccd0, 0x70},//R gain for A
		{0x1c5b8, 0x85},//B gain for C outdoor
		{0x1c5b9, 0x85},//R gain for C outdoor
		{0x1ccd1, 0x85},//B gain for C indoor
		{0x1ccd2, 0x85},//R gain for C indoor
		{0x1ccd3, 0x80},//B gain for D indoor
		{0x1ccd4, 0x80},//R gain for D indoor
		{0x1cccc, 0x80},//B gain for D outdoor
		{0x1cccd, 0x80},//R gain for D outdoor
		{0x1c5b4, 0x80},//C indoor/outdoor switch lum 1 Richard@0517
		{0x1c5b5, 0x80},//C indoor/outdoor switch lum 1 Richard@0517
		{0x1c5b6, 0x80},//C indoor/outdoor switch lum 2 Richard@0517
		{0x1c5b7, 0x80},//C indoor/outdoor switch lum 2 Richard@0517
		
		{0x1ccd5, 0x36},//CT_A
		{0x1ccd6, 0x5f},//CT_C
		{0x1ccd7, 0x9e},//CT_D

		
	
		{0x1c5cd, 0x01},//high light awb shift, modified by Jiangtao to avoid blurish when high CT 0310
		{0x1c5ce, 0x00},
		{0x1c5cf, 0xf0},
		{0x1c5d0, 0x01},
		{0x1c5d1, 0x20},
		{0x1c5d2, 0x03},
		{0x1c5d3, 0x00},
		{0x1c5d4, 0x3d},//
		{0x1c5d5, 0x89},//
		{0x1c5d6, 0xa2},//
		{0x1c5d7, 0xb6},//
		{0x1c5d8, 0x40},
		{0x1c1c2, 0x00},
		{0x1c1c3, 0x20},
	
		/* OVISP CTAWB setting for Long Exposure (HDR/3D)  h00206029 20120529 */
		{0x66206, 0x14},//13},//14},//0x16},//0x13},//0x13},//0x12},
		{0x66207, 0x24},//1f},//23},//0x1e},//0x1e},//0x19},//0x1d},
		{0x66208, 0x10},//0f},//0f},//0x14},//0x13},//0x0f},//0x0e},
		{0x66209, 0x99},//99},//99},//0x99},//0x99},//0x96},//0x9c},
		{0x6620a, 0x6c},//6c},//69},//0x6d},//0x6a},//0x64},//0x62},
		{0x6620b, 0xeb},//eb},//ea},//0xe7},//0xe7},//0xd6},//0xec},
		{0x6620c, 0x9e},//9e},//a1},//0xa1},//0xa1},//0xa3},//0xa1},
		{0x6620d, 0x5b},//5c},//5d},//0x5d},//0x5d},//0x5b},//0x5e},
		{0x6620e, 0x34},//36},//36},//0x34},//0x34},//0x36},//0x38},
		{0x6620f, 0x87},//89},//87},//0x85},//0x8b},//0x85},//0x8c},
		{0x66210, 0x5b},//5c},//58},//0x5a},//0x5a},//0x55},//0x54},
		{0x66201, 0x52},//52},//52},//0x52},//0x52},//0x52},//0x52},


		//CMX 1c
		{0x1c1c8, 0x01}, //c
		{0x1c1c9, 0x57},

		{0x1c1cc, 0x00}, //d
		{0x1c1cd, 0xce},

		{0x1c1d0, 0x02}, //a
		{0x1c1d1, 0x57},


		//LENC CT
		//LENC CT CP
		{0x1c254, 0x00},
		{0x1c255, 0xfa},
		{0x1c256, 0x01},
		{0x1c257, 0x2e},
		{0x1c258, 0x01},
		{0x1c259, 0xb3},
		{0x1c25a, 0x02},
		{0x1c25b, 0x0c},

		//================CMX ================================
		{0x1C1D8, 0x01},//center matrix,
		{0x1C1D9, 0xb4},
		{0x1C1DA, 0xFF},
		{0x1C1DB, 0x69},
		{0x1C1DC, 0xff},
		{0x1C1DD, 0xe3},
		{0x1C1DE, 0xff},
		{0x1C1DF, 0xeA},
		{0x1C1E0, 0x01},
		{0x1C1E1, 0x73},
		{0x1C1E2, 0xFF},
		{0x1C1E3, 0xa3}, 
		{0x1C1E4, 0x00},
		{0x1C1E5, 0x38},
		{0x1C1E6, 0xFF},
		{0x1C1E7, 0x18},
		{0x1C1E8, 0x01},
		{0x1C1E9, 0xb0},

		{0x1C1FC, 0x00},//cmx left delta D
		{0x1C1FD, 0x60},
		{0x1C1FE, 0xff},
		{0x1C1FF, 0xcf},
		{0x1C200, 0xff},
		{0x1C201, 0xd1},
		{0x1C202, 0xff},
		{0x1C203, 0xf1},
		{0x1C204, 0x00},
		{0x1C205, 0x3f},
		{0x1C206, 0xff},
		{0x1C207, 0xd0},
		{0x1C208, 0x00},
		{0x1C209, 0x2e},
		{0x1C20A, 0x00},
		{0x1C20B, 0x8c},
		{0x1C20C, 0xff},
		{0x1C20D, 0x46},

		{0x1C220, 0x01}, //cmx right delta A
		{0x1C221, 0x8c},
		{0x1C222, 0xfe},
		{0x1C223, 0xbb},
		{0x1C224, 0xff},
		{0x1C225, 0xb9},
		{0x1C226, 0x00},
		{0x1C227, 0x27},
		{0x1C228, 0x00},
		{0x1C229, 0x3b},
		{0x1C22A, 0xff},
		{0x1C22B, 0x9e},
		{0x1C22C, 0x00},
		{0x1C22D, 0x01},
		{0x1C22E, 0x00},
		{0x1C22F, 0x84},
		{0x1C230, 0xff},
		{0x1C231, 0xcb},
		
		/* dpc */
		{0x65409, 0x04},
		{0x6540a, 0x02},
		{0x6540b, 0x01},
		{0x6540c, 0x01},
		{0x6540d, 0x04},
		{0x6540e, 0x02},
		{0x6540f, 0x01},
		{0x65410, 0x01},
		{0x65408, 0x0b},
	
		//high gain curve
		{0x1d963, 0x19},
		{0x1d964, 0x21},
		{0x1d965, 0x29},
		{0x1d966, 0x30},
		{0x1d967, 0x3a},
		{0x1d968, 0x44},
		{0x1d969, 0x4e},
		{0x1d96a, 0x59},
		{0x1d96b, 0x65},
		{0x1d96c, 0x74},
		{0x1d96d, 0x85},
		{0x1d96e, 0x99},
		{0x1d96f, 0xaf},
		{0x1d970, 0xC8},
		{0x1d971, 0xe3},
		{0x1d8fe, 0x00}, //UV cut gain control !!!
		{0x1d8ff, 0x70}, //low gain thres 0920
		{0x1d900, 0x78}, //high gain thres 0920
		{0x1d97f, 0x14}, //UV cut low bright thres
		{0x1d973, 0x20}, //UV cut high bright thres
		{0x1d972, 0x00}, //adaptive gamma enable
		{0x1d974, 0x02}, //low gain gamma
		{0x1d975, 0x01},
		{0x1d976, 0x01},//high gain gamma
		{0x1d977, 0xc0},
		{0x1d978, 0x01}, //dark image gamma
		{0x1d979, 0xb3},
		{0x1d97a, 0x88}, //low gain slope
		{0x1d97b, 0x68}, //high gain slope
		{0x1d97c, 0x48}, //dark image slope
		{0x1d97d, 0x14}, //low bright thres
		{0x1d97e, 0x20}, //high bright thres
	
		{0x1d99e, 0x00}, //dynamic UV curve
		//low gain UV curve 1/2
		{0x1d904, 0x93},
		{0x1d905, 0x9d},
		{0x1d906, 0xa0},
		{0x1d907, 0xa0},
		{0x1d908, 0xa0},
		{0x1d909, 0xa0},
		{0x1d90a, 0xa0},
		{0x1d90b, 0xa0},
		{0x1d90c, 0xa0},
		{0x1d90d, 0xa0},
		{0x1d90e, 0xa0},
		{0x1d90f, 0x9f},
		{0x1d910, 0x98},
		{0x1d911, 0x89},
		{0x1d912, 0x73},
		{0x1d913, 0x55},
		//high gain UV curve 1/2
		{0x1d914, 0x46},
		{0x1d915, 0x70},
		{0x1d916, 0x89},
		{0x1d917, 0x98},
		{0x1d918, 0x9f},
		{0x1d919, 0xa0},
		{0x1d91a, 0xa0},
		{0x1d91b, 0xa0},
		{0x1d91c, 0xa0},
		{0x1d91d, 0xa0},
		{0x1d91e, 0xa0},
		{0x1d91f, 0x9f},
		{0x1d920, 0x98},
		{0x1d921, 0x89},
		{0x1d922, 0x73},
		{0x1d923, 0x55},
	
		//dynamic CT AWB
		{0x1d924, 0x00}, //enable
		{0x1d8dc, 0x00}, //Br thres0
		{0x1d8dd, 0xf0}, //Br thres0
		{0x1d8de, 0x44}, //Br thres1
		{0x1d8df, 0x34}, //Br thres1
		{0x1d8da, 0x10}, //Br Ratio0
		{0x1d8db, 0x08}, //Br Ratio1
		{0x1d925, 0x0f}, //highlight cwf thres //66206
		{0x1d926, 0x11}, //middlelight cwf thres
		{0x1d927, 0x1c}, //lowlight cwf thres
		{0x1d928, 0x0a}, //highlight A thres //66207
		{0x1d929, 0x14}, //middlelight A thres
		{0x1d92a, 0x1c}, //lowlight A thres
		{0x1d92b, 0x14}, //highlight D thres //66208
		{0x1d92c, 0x14}, //middlelight D thres
		{0x1d92d, 0x1c}, //lowlight D thres
		{0x1d92e, 0x54}, //highlight D limit //6620d
		{0x1d92f, 0x40}, //middlelight D limit
		{0x1d930, 0x40}, //lowlight D limit
		{0x1d931, 0x4b}, //highlight A limit //6620e
		{0x1d932, 0x32}, //middlelight A limit
		{0x1d933, 0x32}, //lowlight A limit
		{0x1d934, 0x6e}, //highlight D split //6620f
		{0x1d935, 0x6e}, //middlelight D split
		{0x1d936, 0x6e}, //lowlight D split
		{0x1d937, 0x60}, //highlight A split //66210
		{0x1d938, 0x60}, //middlelight A split
		{0x1d939, 0x60}, //lowlight A split
	
		/* pre-set awb for D50(sunny day) D65(overcast/cloudy) TL84(fluorescent) and A(incandescent) */
		{0x1c4f0, 0x00},//BGain 0x1c17c -> 0x3
		{0x1c4f1, 0xaa},
		{0x1c4f2, 0x00},//GGain
		{0x1c4f3, 0x80},
		{0x1c4f4, 0x00},//RGain
		{0x1c4f5, 0xb1},
	
		{0x1c4f6, 0x00},//BGain 0x1c17c -> 0x4
		{0x1c4f7, 0x94},
		{0x1c4f8, 0x00},//GGain
		{0x1c4f9, 0x80},
		{0x1c4fa, 0x00},//RGain
		{0x1c4fb, 0xc6},
	
		{0x1c4fc, 0x00},//BGain 0x1c17c -> 0x5
		{0x1c4fd, 0xe9},
		{0x1c4fe, 0x00},//GGain
		{0x1c4ff, 0x80},
		{0x1c500, 0x00},//RGain
		{0x1c501, 0x98},
	
		{0x1c502, 0x01},//BGain 0x1c17c -> 0x6
		{0x1c503, 0x2a},
		{0x1c504, 0x00},//GGain
		{0x1c505, 0x8a},
		{0x1c506, 0x00},//RGain
		{0x1c507, 0x80},
};
#endif

#endif /* __GC2755_H__ */

